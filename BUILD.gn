declare_args(){
    d3d11 = false
    omega_sl = false
}

include_dir = "//include"
if(is_linux){
    vulkan_include_dir = "/usr/local/include"
}
rhi_srcs = []

if(is_windows){
    rhi_srcs +=[
         # Headers
         "src/d3d12/GED3D12.h",
         "src/d3d12/GED3D12CommandQueue.h",
         "src/d3d12/GED3D12RenderTarget.h",
         # Sources
         "src/d3d12/GED3D12.cpp",
         "src/d3d12/GED3D12CommandQueue.cpp",
         "src/d3d12/GED3D12RenderTarget.cpp"
    ]
}
else if(is_mac){

    rhi_srcs +=[
        # Headers
        "src/metal/GEMetal.h",
        "src/metal/GEMetalCommandQueue.h",
        # Sources
        "src/metal/GEMetal.mm",
        "src/metal/GEMetalCommandQueue.mm"
    ]
}
else if(is_linux){

    rhi_srcs +=[
        # Headers
        "src/vulkan/GEVulkan.h",
        # Sources
        "src/vulkan/GEVulkan.cpp"
    ]
}

shared_library("OmegaGTE"){
    if(is_mac){
        defines = ["TARGET_METAL"]
        libs = [
            "c",
            "c++"
        ]
        frameworks = ["Metal.framework"]
        output_extension = "dylib"
    }
    else if(is_windows){
        defines = ["TARGET_DIRECTX"]
    }
    else if(is_linux){
        defines = ["TARGET_VULKAN"]
    }
    include_dirs = [
        include_dir,
    ]
    sources = [
        # Headers 
        "$include_dir/GTEBase.h",
        "$include_dir/GE.h",
        "$include_dir/GECommandQueue.h",
        "$include_dir/GERenderTarget.h",
        "$include_dir/GERenderPass.h",
        "$include_dir/GETexture.h",
        # Sources
        "src/GE.cpp",
        "src/GTEBase.cpp",
        "src/GECommandQueue.cpp",
        "src/GERenderTarget.cpp",
        "src/GERenderPass.cpp",
    ] + rhi_srcs
}

if(omega_sl){
    executable("omega-slc"){
        sources = [
            "omega-sl/main.cpp"
        ]
    }
}