current_version = "0.1"

include_dir = get_path_info("../include","abspath")
if(is_linux){
    vulkan_include_dir = "/usr/local/include"
    vulkan_link_flags = exec_script("./pkg-conf.py",["--name","vulkan","-L"],"value")
    gtk_c_flags = exec_script("./pkg-conf.py",["--name","gtk+-3.0","-F"],"value")
    gtk_link_flags = exec_script("./pkg-conf.py",["--name","gtk+-3.0","-L"],"value")
}
rhi_srcs = []

shaderc_py = get_path_info("./shaderc.py","abspath")

template("shader_library"){
    assert(defined(invoker.sources))
    assert(defined(invoker.output_dir))
    t_name = target_name
    action(target_name){
        script = shaderc_py
        sources = invoker.sources
        if(is_mac){
            args = [
                "-o",
                rebase_path(invoker.output_dir + "/${t_name}.metallib"),
                "--target",
                "metal",
            ] + sources
        }
    }
}

if(is_windows){
    rhi_srcs +=[
         # Headers
         get_path_info("../src/d3d12/GED3D12.h","abspath"),
         get_path_info("../src/d3d12/GED3D12CommandQueue.h","abspath"),
         get_path_info("../src/d3d12/GED3D12RenderTarget.h","abspath"),
         get_path_info("../src/d3d12/GED3D12Pipeline.h","abspath"),
         get_path_info("../src/d3d12/GED3D12Texture.h","abspath"),
         # Sources
         get_path_info("../src/d3d12/GED3D12.cpp","abspath"),
         get_path_info("../src/d3d12/GED3D12CommandQueue.cpp","abspath"),
         get_path_info("../src/d3d12/GED3D12RenderTarget.cpp","abspath"),
         get_path_info("../src/d3d12/GED3D12Pipeline.cpp","abspath"),
         get_path_info("../src/d3d12/GED3D12Texture.cpp","abspath"),
         get_path_info("../src/D3D12TEContext.cpp","abspath")
    ]
}
else if(is_mac){

    rhi_srcs +=[
        # Headers
        get_path_info("../src/metal/GEMetal.h","abspath"),
        get_path_info("../src/metal/GEMetalCommandQueue.h","abspath"),
        get_path_info("../src/metal/GEMetalPipeline.h","abspath"),
        get_path_info("../src/metal/GEMetalRenderTarget.h","abspath"),
        get_path_info("../src/metal/GEMetalTexture.h","abspath"),
        # Sources
        get_path_info("../src/metal/GEMetal.mm","abspath"),
        get_path_info("../src/metal/GEMetalCommandQueue.mm","abspath"),
        get_path_info("../src/metal/GEMetalPipeline.mm","abspath"),
        get_path_info("../src/metal/GEMetalRenderTarget.mm","abspath"),
        get_path_info("../src/metal/GEMetalTexture.mm","abspath"),
        get_path_info("../src/MetalTEContext.mm","abspath")
    ]
}
else if(is_linux){

    rhi_srcs +=[
        # Headers
        get_path_info("../src/vulkan/GEVulkan.h","abspath"),
        get_path_info("../src/vulkan/GEVulkanCommandQueue.h","abspath"),
        get_path_info("../src/vulkan/GEVulkanPipeline.h","abspath"),
        get_path_info("../src/vulkan/GEVulkanTexture.h","abspath"),
        # Sources
        get_path_info("../src/vulkan/GEVulkan.cpp","abspath"),
        get_path_info("../src/vulkan/GEVulkanCommandQueue.cpp","abspath"),
        get_path_info("../src/vulkan/GEVulkanPipeline.cpp","abspath"),
        get_path_info("../src/vulkan/GEVulkanTexture.cpp","abspath"),
    ]
}

omegagte_sources = [
        # Sources
        get_path_info("../src/GE.cpp","abspath"),
        get_path_info("../src/GTEBase.cpp","abspath"),
        get_path_info("../src/GEPipeline.cpp","abspath"),
        get_path_info("../src/GECommandQueue.cpp","abspath"),
        get_path_info("../src/GERenderTarget.cpp","abspath"),
        get_path_info("../src/TE.cpp","abspath"),
    ] + rhi_srcs


template("OmegaGTE_Export"){

    shared_library("OmegaGTE"){
        sources = omegagte_sources
        if(is_mac){
            defines = ["TARGET_METAL"]
            libs = [
                "c",
                "c++"
            ]
            ldflags = [
                "-dylib",
                "-Xlinker",
                "-install_name",
                "-Xlinker",
                "@rpath/OmegaGTE.framework/Versions/${current_version}/OmegaGTE",
            ]
            frameworks = ["Foundation.framework","QuartzCore.framework","Metal.framework"]
            output_extension = ""
            output_dir = "$root_out_dir/in"
        }
        else if(is_windows){
            defines = ["TARGET_DIRECTX"]
            output_extension = "dll"
            ldflags = [
                # "/WHOLEARCHIVE",
                "/INCREMENTAL",
                "/opt:noref"
            ]
            output_dir = "$root_out_dir/libs"
        }
        else if(is_linux){
            defines = ["TARGET_VULKAN"]
            cflags_cc = ["-stdlib=libc++","-isystem",libcxx_include] + gtk_c_flags + ["-fPIC"]
            ldflags =  gtk_link_flags + vulkan_link_flags
            output_extension = "so"
        }
        include_dirs = [
            include_dir,
        ]
        if(is_linux){
            include_dirs += [
                vulkan_include_dir
            ]
        }
    }


    if(is_mac){
        bundle_data("OmegaGTE__plist"){
            sources = [
                "../src/Info.plist"
            ]
            outputs = [
                "{{bundle_resources_dir}}/{{source_file_part}}"
            ]
        }
        bundle_data("OmegaGTE__exec"){
            sources = [
                "${root_out_dir}/in/OmegaGTE"
            ]
            public_deps = [
                ":OmegaGTE"
            ]
            outputs = [
                "{{bundle_executable_dir}}/{{source_file_part}}"
            ]
        }

        create_bundle("OmegaGTE.framework"){
            public_deps = [
                ":OmegaGTE__exec",
                ":OmegaGTE__plist"
            ]
            bundle_root_dir = "${root_out_dir}/Frameworks/OmegaGTE.framework"
            bundle_contents_dir = "${bundle_root_dir}/Versions/${current_version}"
            bundle_resources_dir = "${bundle_contents_dir}/Resources"
            bundle_executable_dir = "${bundle_contents_dir}"

            code_signing_script = "./codesign.py"
            code_signing_sources = [
                "${root_out_dir}/in/OmegaGTE"
            ]
            code_signing_args = [
                "--sig",
                code_signature,
                "--code",
                rebase_path("$root_out_dir/Frameworks/$target_name/Versions/${current_version}"),
                "--framework",
                "-F",
                rebase_path("$root_out_dir/Frameworks/${target_name}"),
                "--name",
                "OmegaGTE",
                "--current_version",
                "${current_version}"
            ]
            code_signing_outputs = [
                "${bundle_contents_dir}/_CodeSignature"
            ]
        }
    }

}