import("./gn/OmegaGTE.gni")
import("./gn-utils/Utils.gni")

declare_args(){
    d3d11 = false
    omega_sl = false
    if(defined(external_project)){
        external_project = external_project
    }
    else {
        external_project = false
    }
}

# config("spirv_cross_config") {
#   include_dirs = [ "./spirv-cross" ]

#   defines = [ "SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS" ]
# }

# source_set("spirv_cross_sources") {
#   public_configs = [ ":spirv_cross_config" ]

#   sources = [
#     "./spirv-cross/GLSL.std.450.h",
#     "./spirv-cross/spirv.hpp",
#     "./spirv-cross/spirv_cfg.cpp",
#     "./spirv-cross/spirv_cfg.hpp",
#     "./spirv-cross/spirv_cpp.cpp",
#     "./spirv-cross/spirv_cross_c.cpp",
#     "./spirv-cross/spirv_common.hpp",
#     "./spirv-cross/spirv_cross.cpp",
#     "./spirv-cross/spirv_cross.hpp",
#     "./spirv-cross/spirv_cross_containers.hpp",
#     "./spirv-cross/spirv_cross_error_handling.hpp",
#     "./spirv-cross/spirv_cross_parsed_ir.cpp",
#     "./spirv-cross/spirv_cross_parsed_ir.hpp",
#     "./spirv-cross/spirv_cross_util.cpp",
#     "./spirv-cross/spirv_cross_util.hpp",
#     "./spirv-cross/spirv_glsl.cpp",
#     "./spirv-cross/spirv_glsl.hpp",
#     "./spirv-cross/spirv_hlsl.cpp",
#     "./spirv-cross/spirv_hlsl.hpp",    
#     "./spirv-cross/spirv_msl.cpp",
#     "./spirv-cross/spirv_msl.hpp",
#     "./spirv-cross/spirv_parser.cpp",
#     "./spirv-cross/spirv_parser.hpp",
#     "./spirv-cross/spirv_reflect.cpp",
#     "./spirv-cross/spirv_reflect.hpp",
#   ]

#   if (!is_windows) {
#     cflags = [ "-fno-exceptions" ]
#   }

# #   if (is_clang) {
#     cflags_cc = [
#       "-Wno-extra-semi",
#       "-Wno-ignored-qualifiers",
#       "-Wno-implicit-fallthrough",
#       "-Wno-inconsistent-missing-override",
#       "-Wno-missing-field-initializers",
#       "-Wno-newline-eof",
#       "-Wno-sign-compare",
#       "-Wno-unused-variable",
#     ]
# #   }
# }


# executable("spirv-cross"){
#     sources = [
#         "./spirv-cross/main.cpp"
#     ]
#     public_deps = [
#         ":spirv_cross_sources"
#     ]
#     include_dirs = [
#         "./spirv-cross",
#         "./spirv-cross/include"
#     ]
#     output_dir = "$root_out_dir/tools"
# }

# group("shader_cross_comp"){
    
# }
omega_gte_headers = [
    "./include/OmegaGTE.h",
    "./include/omegaGTE/GE.h",
    "./include/omegaGTE/GECommandQueue.h",
    "./include/omegaGTE/GEPipeline.h",
    "./include/omegaGTE/GERenderTarget.h",
    "./include/omegaGTE/GETexture.h",
    "./include/omegaGTE/GTEBase.h",
    "./include/omegaGTE/GTEShaderTypes.h",
    "./include/omegaGTE/TE.h"
    ]
if(is_mac){
    config("OmegaGTE_Config"){
        defines = [
            "TARGET_METAL"
        ]
    }
    mac_framework_bundle("OmegaGTE"){
        version = "0.2"
        public_configs = [
            ":OmegaGTE_Config"
        ]
        libs = [
            "c",
            "c++"
        ]
        include_dirs = [
            include_dir,
        ]
        public = omega_gte_headers
        sources = [
            "src/GE.cpp",
            "src/GTEBase.cpp",
            "src/GEPipeline.cpp",
            "src/GECommandQueue.cpp",
            "src/GERenderTarget.cpp",
            "src/TE.cpp",
            "src/OmegaGTE.cpp"
        ] + rhi_srcs
        ldflags = [
            "-dylib",
            "-Xlinker",
            "-install_name",
            "-Xlinker",
            "@rpath/OmegaGTE.framework/Versions/${current_version}/OmegaGTE",
        ]
        resources = [
            "./src/Info.plist"
        ]
        frameworks = ["Foundation.framework","QuartzCore.framework","Metal.framework"]
        output_dir = "$root_out_dir/Frameworks"
    }
}
else {
    shared_library("OmegaGTE"){
        if(is_windows){
            defines = ["TARGET_DIRECTX"]
            ldflags = [
                # "/WHOLEARCHIVE",
                "/INCREMENTAL",
                "/opt:noref"
            ]
            output_dir = "$root_out_dir/libs"
        }
        else if(is_linux){
            defines = ["TARGET_VULKAN"]
            cflags_cc = ["-stdlib=libc++","-isystem",libcxx_include] + gtk_c_flags + ["-fPIC"]
            ldflags =  gtk_link_flags + vulkan_link_flags
        }
        public_headers = omega_gte_headers
        include_dirs = [
            include_dir,
        ]
        if(is_linux){
            include_dirs += [
                vulkan_include_dir
            ]
        }
        sources = [
            # Sources
            "src/GE.cpp",
            "src/GTEBase.cpp",
            "src/GEPipeline.cpp",
            "src/GECommandQueue.cpp",
            "src/GERenderTarget.cpp",
            "src/TE.cpp",
            "src/OmegaGTE.cpp"
        ] + rhi_srcs
    }
}

if(!external_project){

    test_out_dir = root_out_dir + "/tests"

    if(is_windows){
        template("directx_test"){

            if(defined(invoker.include_dirs)){
                invoker.include_dirs += [include_dir]
            }
            else {
                invoker.include_dirs = [include_dir]
            }
            invoker.ldflags = [
            "User32.lib"
            ]
            invoker.public_deps = [
                ":OmegaGTE"
            ]
            invoker.output_dir = "$root_out_dir/tests"
            executable(target_name){
                forward_variables_from(invoker,"*")
            }
            exe_name = target_name
        
            copy("${target_name}__copy_dll"){
                sources = ["$root_out_dir/libs/OmegaGTE.dll"]
                public_deps = [
                    ":$exe_name"
                ]
                outputs = [
                    "${test_out_dir}/{{source_file_part}}"
                ]
            }
        }

        directx_test("2DTest"){
            sources = [
                "tests/directx/2DTest/main.cpp"
            ]
        }
    }

    if(is_mac){
        
        mac_app_bundle("2DTest"){
            sources = [
                "./tests/metal/2DTest/main.mm"
            ]
            include_dirs = [
                include_dir
            ]
            plist = "./tests/metal/2DTest/Info.plist"
            public_deps = [
                ":OmegaGTE.framework"
            ]
            resources = [
                "./tests/metal/2DTest/MainMenu.nib"
            ]
            embedded_frameworks = [
                "OmegaGTE.framework"
            ]
            frameworks = [
                "Cocoa.framework",
                "QuartzCore.framework"
            ]
            output_dir = test_out_dir
        }
    }

    if(is_linux){
        # Compile Test Suite
        template("vulkan_test"){
            if(defined(invoker.include_dirs)){
                invoker.include_dirs += [include_dir]
            }
            else {
                invoker.include_dirs = [include_dir]
            }
            invoker.cflags_cc = ["-stdlib=libc++","-isystem",libcxx_include] + gtk_c_flags
            invoker.ldflags =
            gtk_link_flags + ["-rpath",rebase_path("$root_out_dir/tests")]
            invoker.output_name = "$target_name"
            invoker.libs = [
                "c",
                "c++",
                "c++abi",
            ]
            invoker.public_deps = [
                ":OmegaGTE"
            ]
            executable(target_name){
                forward_variables_from(invoker,"*")
            }
            exe_name = target_name
            copy("${target_name}__copy_so"){
                sources = [
                    "$root_out_dir/OmegaGTE.so",
                    "$libcxx_dir/libc++.so.1",
                    "$libcxx_dir/libc++abi.so.1"
                ]
                public_deps = [
                    ":$exe_name"
                ]
                outputs = [
                    "$test_out_dir/{{source_file_part}}"
                ]
            }
        }

        vulkan_test("2DTest"){
            sources = [
                "tests/vulkan/2DTest/main.cpp"
            ]
        }
        
    }

}

# if(omega_sl){
#     executable("omegaslc"){
#         output_dir = "$root_out_dir/bin"
#         # if(is_windows){
#         #     output_extension = "exe"
#         # }
#         sources = [
#             "omegasl/main.cpp",
#             "omegasl/Gen.h",
#             "omegasl/Gen.cpp",
#             "omegasl/Parser.h",
#             "omegasl/Parser.cpp"
#         ]
#         # defines = [
#         #     "__STDC_CONSTANT_MACROS",
#         #     "__STDC_FORMAT_MACROS",
#         #     "__STDC_LIMIT_MACROS"
#         # ]
#         # libs = [
#         #     "clangParse"
#         # ]
#     }
# }