current_version = "0.1"

include_dir = get_path_info("../include","abspath")
if(is_linux){
    vulkan_include_dir = "/usr/local/include"
    vulkan_link_flags = exec_script("./pkg-conf.py",["--name","vulkan","-L"],"value")
    gtk_c_flags = exec_script("./pkg-conf.py",["--name","gtk+-3.0","-F"],"value")
    gtk_link_flags = exec_script("./pkg-conf.py",["--name","gtk+-3.0","-L"],"value")
}
rhi_srcs = []

omegaslc_py = get_path_info("../omegasl/_main.py","abspath")

template("shader_library"){
    assert(defined(invoker.source))
    assert(defined(invoker.temp_dir))
    assert(defined(invoker.output_dir))

    t_name = target_name
    action(t_name){
        script = omegaslc_py
        sources = [invoker.source]
        args = ["--temp",rebase_path(invoker.temp_dir),"-o",rebase_path(invoker.output_dir),"--target"]
        if(is_mac){
            args += ["metal","--use-simd"]
        }
        else if(is_windows){
            args += ["hlsl"]
        }
        else {
            args += ["glsl"]
        }
        args += [rebase_path(invoker.source)]
        outputs = [
            "${invoker.output_dir}"
        ]
    }
}

if(is_windows){
    rhi_srcs +=[
         # Headers
         get_path_info("../src/d3d12/GED3D12.h","abspath"),
         get_path_info("../src/d3d12/GED3D12CommandQueue.h","abspath"),
         get_path_info("../src/d3d12/GED3D12RenderTarget.h","abspath"),
         get_path_info("../src/d3d12/GED3D12Pipeline.h","abspath"),
         get_path_info("../src/d3d12/GED3D12Texture.h","abspath"),
         # Sources
         get_path_info("../src/d3d12/GED3D12.cpp","abspath"),
         get_path_info("../src/d3d12/GED3D12CommandQueue.cpp","abspath"),
         get_path_info("../src/d3d12/GED3D12RenderTarget.cpp","abspath"),
         get_path_info("../src/d3d12/GED3D12Pipeline.cpp","abspath"),
         get_path_info("../src/d3d12/GED3D12Texture.cpp","abspath"),
         get_path_info("../src/D3D12TEContext.cpp","abspath")
    ]
}
else if(is_mac){

    rhi_srcs +=[
        # Headers
        get_path_info("../src/metal/GEMetal.h","abspath"),
        get_path_info("../src/metal/GEMetalCommandQueue.h","abspath"),
        get_path_info("../src/metal/GEMetalPipeline.h","abspath"),
        get_path_info("../src/metal/GEMetalRenderTarget.h","abspath"),
        get_path_info("../src/metal/GEMetalTexture.h","abspath"),
        # Sources
        get_path_info("../src/metal/GEMetal.mm","abspath"),
        get_path_info("../src/metal/GEMetalCommandQueue.mm","abspath"),
        get_path_info("../src/metal/GEMetalPipeline.mm","abspath"),
        get_path_info("../src/metal/GEMetalRenderTarget.mm","abspath"),
        get_path_info("../src/metal/GEMetalTexture.mm","abspath"),
        get_path_info("../src/MetalTEContext.mm","abspath")
    ]
}
else if(is_linux){

    rhi_srcs +=[
        # Headers
        get_path_info("../src/vulkan/GEVulkan.h","abspath"),
        get_path_info("../src/vulkan/GEVulkanCommandQueue.h","abspath"),
        get_path_info("../src/vulkan/GEVulkanPipeline.h","abspath"),
        get_path_info("../src/vulkan/GEVulkanTexture.h","abspath"),
        # Sources
        get_path_info("../src/vulkan/GEVulkan.cpp","abspath"),
        get_path_info("../src/vulkan/GEVulkanCommandQueue.cpp","abspath"),
        get_path_info("../src/vulkan/GEVulkanPipeline.cpp","abspath"),
        get_path_info("../src/vulkan/GEVulkanTexture.cpp","abspath"),
    ]
}

omegagte_sources = [
        # Sources
        get_path_info("../src/GE.cpp","abspath"),
        get_path_info("../src/GTEBase.cpp","abspath"),
        get_path_info("../src/GEPipeline.cpp","abspath"),
        get_path_info("../src/GECommandQueue.cpp","abspath"),
        get_path_info("../src/GERenderTarget.cpp","abspath"),
        get_path_info("../src/TE.cpp","abspath"),
    ] + rhi_srcs
