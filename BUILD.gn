import("//gn/EXPORT.gni")

declare_args(){
    d3d11 = false
    omega_sl = false
    libcxx_dir = ""
    libcxx_include = ""
    llvm_dir = ""
    glm_include_dir = ""
    glm_lib = ""
    code_signature = ""
}

shared_library("OmegaGTE"){
    if(is_mac){
        defines = ["TARGET_METAL"]
        libs = [
            "c",
            "c++"
        ]
        ldflags = [
            "-dylib",
            "-Xlinker",
            "-install_name",
            "-Xlinker",
            "@rpath/OmegaGTE.framework/Versions/${current_version}/OmegaGTE",
        ]
        frameworks = ["Foundation.framework","QuartzCore.framework","Metal.framework"]
        output_extension = ""
        output_dir = "$root_out_dir/in"
    }
    else if(is_windows){
        defines = ["TARGET_DIRECTX"]
        output_extension = "dll"
        ldflags = [
            # "/WHOLEARCHIVE",
            "/INCREMENTAL",
            "/opt:noref"
        ]
        output_dir = "$root_out_dir/libs"
    }
    else if(is_linux){
        defines = ["TARGET_VULKAN"]
        cflags_cc = ["-stdlib=libc++","-isystem",libcxx_include] + gtk_c_flags + ["-fPIC"]
        ldflags =  gtk_link_flags + vulkan_link_flags
        output_extension = "so"
    }
    include_dirs = [
        include_dir,
    ]
    if(is_linux){
        include_dirs += [
            vulkan_include_dir
        ]
    }
    sources = [
        # Sources
        "src/GE.cpp",
        "src/GTEBase.cpp",
        "src/GEPipeline.cpp",
        "src/GECommandQueue.cpp",
        "src/GERenderTarget.cpp",
        "src/TE.cpp",
        "src/OmegaGTE.cpp"
    ] + rhi_srcs
}


if(is_mac){
    bundle_data("OmegaGTE__plist"){
        sources = [
            "//src/Info.plist"
        ]
        outputs = [
            "{{bundle_resources_dir}}/{{source_file_part}}"
        ]
    }
    bundle_data("OmegaGTE__exec"){
        sources = [
            "${root_out_dir}/in/OmegaGTE"
        ]
        public_deps = [
            ":OmegaGTE"
        ]
        outputs = [
            "{{bundle_executable_dir}}/{{source_file_part}}"
        ]
    }

    create_bundle("OmegaGTE.framework"){
        public_deps = [
            ":OmegaGTE__exec",
            ":OmegaGTE__plist"
        ]
        bundle_root_dir = "${root_out_dir}/Frameworks/OmegaGTE.framework"
        bundle_contents_dir = "${bundle_root_dir}/Versions/${current_version}"
        bundle_resources_dir = "${bundle_contents_dir}/Resources"
        bundle_executable_dir = "${bundle_contents_dir}"

        code_signing_script = "//gn/codesign.py"
        code_signing_sources = [
            "${root_out_dir}/in/OmegaGTE"
        ]
        code_signing_args = [
             "--sig",
              code_signature,
              "--code",
              rebase_path("$root_out_dir/Frameworks/$target_name/Versions/${current_version}"),
              "--framework",
              "-F",
              rebase_path("$root_out_dir/Frameworks/${target_name}"),
              "--name",
              "OmegaGTE",
              "--current_version",
              "${current_version}"
        ]
        code_signing_outputs = [
            "${bundle_contents_dir}/_CodeSignature"
        ]
    }
}

test_out_dir = root_out_dir + "/tests"

if(is_windows){
    template("directx_test"){

        if(defined(invoker.include_dirs)){
            invoker.include_dirs += [include_dir]
        }
        else {
            invoker.include_dirs = [include_dir]
        }
        invoker.ldflags = [
           "User32.lib"
        ]
        invoker.public_deps = [
            ":OmegaGTE"
        ]
        invoker.output_dir = "$root_out_dir/tests"
        executable(target_name){
            forward_variables_from(invoker,"*")
        }
        exe_name = target_name
       
        copy("${target_name}__copy_dll"){
            sources = ["$root_out_dir/libs/OmegaGTE.dll"]
            public_deps = [
                ":$exe_name"
            ]
            outputs = [
                "${test_out_dir}/{{source_file_part}}"
            ]
        }
    }

    directx_test("2DTest"){
        sources = [
            "tests/directx/2DTest/main.cpp"
        ]
    }
}

if(is_linux){
    # Compile Test Suite
    template("vulkan_test"){
        if(defined(invoker.include_dirs)){
            invoker.include_dirs += [include_dir]
        }
        else {
            invoker.include_dirs = [include_dir]
        }
        invoker.cflags_cc = ["-stdlib=libc++","-isystem",libcxx_include] + gtk_c_flags
        invoker.ldflags =
        gtk_link_flags + ["-rpath",rebase_path("$root_out_dir/tests")]
        invoker.output_name = "$target_name"
        invoker.libs = [
            "c",
            "c++",
            "c++abi",
        ]
        invoker.public_deps = [
            ":OmegaGTE"
        ]
        executable(target_name){
            forward_variables_from(invoker,"*")
        }
        exe_name = target_name
        copy("${target_name}__copy_so"){
            sources = [
                "$root_out_dir/OmegaGTE.so",
                "$libcxx_dir/libc++.so.1",
                "$libcxx_dir/libc++abi.so.1"
            ]
            public_deps = [
                ":$exe_name"
            ]
            outputs = [
                "$test_out_dir/{{source_file_part}}"
            ]
        }
    }

    vulkan_test("2DTest"){
        sources = [
            "tests/vulkan/2DTest/main.cpp"
        ]
    }
    
}

if(omega_sl){
    executable("omegaslc"){
        if(is_windows){
            output_extension = "exe"
        }
        sources = [
            "omegasl/main.cpp",
            "omegasl/OmegaSLGen.h",
            "omegasl/OmegaSLGen.cpp",
            "omegasl/OmegaSLSyntax.h",
            "omegasl/OmegaSLSyntax.cpp"
        ]
        include_dirs = [
            "${llvm_dir}/include"
        ]
        lib_dirs = [
            "${llvm_dir}/libs"
        ]
        defines = [
            "__STDC_CONSTANT_MACROS",
            "__STDC_FORMAT_MACROS",
            "__STDC_LIMIT_MACROS"
        ]
        libs = [
            "clangParse"
        ]
    }
}